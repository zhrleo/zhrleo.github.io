<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>图论基础</title>
    <link href="/2024/07/30/%E5%9B%BE%E8%AE%BA%E5%9F%BA%E7%A1%80/"/>
    <url>/2024/07/30/%E5%9B%BE%E8%AE%BA%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p>图论是数学的一个重要分支，许多问题都可以抽象成图进而解决。</p><h1 id="图的基本概念"><a href="#图的基本概念" class="headerlink" title="图的基本概念"></a>图的基本概念</h1><p><strong>图</strong>：图是一个二元组，即G&#x3D;(V,E)，其中V为<strong>点集</strong>，我们称V中的每一个元素为<strong>顶点</strong>或<strong>结点</strong>，简称<strong>点</strong>；E为连接节点之间边的集合，称为<strong>边集</strong>。</p><p><strong>有限图</strong>：V,E均为有限集时的图</p><p><strong>无限图</strong>：V或E为有限集时的图</p><p><strong>无向图</strong>：E中的每一个元素均为无序二元组(u,v)，称作<strong>无向边</strong>，简称<strong>边</strong>，其中$u,v\in V$。设e&#x3D;(u,v)，则u，v称为e的<strong>端点</strong>。</p><p><strong>有向图</strong>：E中的每一个元素均为有序二元组(u,v)，有时也写作$u\to v$，称作<strong>有向边</strong>或<strong>弧</strong>，在不会产生歧义的情况下也可以称为<strong>边</strong>。设$e&#x3D;u\to v$，则称u为e的<strong>起点</strong>，v为e的<strong>终点</strong>，起点和终点称为e的<strong>端点</strong>。此时u为v的直接前驱，v为u的直接后继。</p><p><strong>混合图</strong>：既有有向边，又有无向边的图</p><p><strong>赋权图</strong>：图的每一条边都被赋予一个数作为该边的权的图。特别地，当每一条边的边权均为正数是，这个图被称为<strong>正权图</strong>。</p><p>阶：图中的点数$\operatorname{card}V$。</p>]]></content>
    
    
    
    <tags>
      
      <tag>图论笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>递推</title>
    <link href="/2024/07/23/%E9%80%92%E6%8E%A8/"/>
    <url>/2024/07/23/%E9%80%92%E6%8E%A8/</url>
    
    <content type="html"><![CDATA[<p>递推是动态规划（Dynamic Programming，简称DP）的基础，虽然狭义上的DP需要有最优性，与递推有所区别，但是在广义上讲所有的递推都属于DP，所以今后就粗暴将所有使用递推的算法称为DP。<del>（当然，也有一个原因是笔者也分不清递推与DP的差别）</del></p><p>同时，这篇博客也以解决<a class="btn" href="https://www.luogu.com.cn/problem/P1216" title="P1216 [USACO1.5][IOI1994]数字三角形 Number Triangles">P1216 [USACO1.5][IOI1994]数字三角形 Number Triangles</a>为主来介绍递推算法。</p><h1 id="搜索做法"><a href="#搜索做法" class="headerlink" title="搜索做法"></a>搜索做法</h1><p>暴力搜索每一条路径即可。时间复杂度为$O(2^r)$，显然过不了。</p><p>暴力33分代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> r, a[<span class="hljs-number">1005</span>][<span class="hljs-number">1005</span>], ans;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> dep, <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> sum)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (dep &gt; r)<br>    &#123;<br>        ans = <span class="hljs-built_in">max</span>(ans, sum);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">dfs</span>(dep + <span class="hljs-number">1</span>, x, sum + a[dep][x]);<br>    <span class="hljs-keyword">if</span> (x &lt; dep)<br>        <span class="hljs-built_in">dfs</span>(dep + <span class="hljs-number">1</span>, x + <span class="hljs-number">1</span>, sum + a[dep][x]);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> <span class="hljs-type">const</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;r);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= r; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= i; j++)<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i][j]);<br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="贪心做法"><a href="#贪心做法" class="headerlink" title="贪心做法"></a>贪心做法</h1><p>考虑每一次选择下一条路径的时候都选择当前更大的数字。</p><p>但显然这种做法是错的，因为样例就是一个反例。如果某一个决策虽然当前的数字小，但是接下来的数字都很大；反而虽然当前的数字小，但是接下来的数字都很小，那么贪心就被hack掉了。</p><h1 id="记忆化搜索做法"><a href="#记忆化搜索做法" class="headerlink" title="记忆化搜索做法"></a>记忆化搜索做法</h1><p>考虑优化上面的暴搜代码，可以发现在搜索时经常出现重复的状态。那我们就使用一个新的数组$f_{x,y}$来保存每一个状态，来保证每一个状态只被访问一次，这样我们就把搜索优化到了$O(n^2)$，可以AC。</p><p>参考代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> r, a[<span class="hljs-number">1005</span>][<span class="hljs-number">1005</span>], f[<span class="hljs-number">1005</span>][<span class="hljs-number">1005</span>], ans;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (f[x][y] != <span class="hljs-number">-1</span>)<br>        <span class="hljs-keyword">return</span> f[x][y];<br>    <span class="hljs-keyword">if</span> (x &gt; r)<br>    &#123;<br>        f[x][y] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    f[x][y] = a[x][y] + <span class="hljs-built_in">max</span>(<span class="hljs-built_in">dfs</span>(x + <span class="hljs-number">1</span>, y), <span class="hljs-built_in">dfs</span>(x + <span class="hljs-number">1</span>, y + <span class="hljs-number">1</span>));<br>    <span class="hljs-keyword">return</span> f[x][y];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> <span class="hljs-type">const</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(f, <span class="hljs-number">-1</span>, <span class="hljs-built_in">sizeof</span>(f));<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;r);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= r; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= i; j++)<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i][j]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="正解：DP做法"><a href="#正解：DP做法" class="headerlink" title="正解：DP做法"></a>正解：DP做法</h1><p>设$\operatorname{f}(i,j)$为以(i,j)为起点可以取得的最大路径，不难得出状态转移方程：<br>$$<br>\operatorname{f}(i,j)&#x3D;a_{i,j}+\max(\operatorname{f}(i+1,j),\operatorname{f}(i+1,j+1))<br>$$<br>所以答案为$\operatorname{f}(1,1)$。</p><p>通过观察，我们不难发现记忆化搜索中转移的式子与状态转移方程基本相同，所以DP与记忆化搜索时间复杂度相同。</p><p>参考代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> r, f[<span class="hljs-number">1005</span>][<span class="hljs-number">1005</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> <span class="hljs-type">const</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;r);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= r; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= i; j++)<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;f[i][j]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = r; i &gt; <span class="hljs-number">0</span>; i--)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i; j &gt; <span class="hljs-number">0</span>; j--)<br>            f[i][j] += <span class="hljs-built_in">max</span>(f[i + <span class="hljs-number">1</span>][j], f[i + <span class="hljs-number">1</span>][j + <span class="hljs-number">1</span>]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, f[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>由上述解题过程不难看出，可以用DP解决的问题一般都具有三个特点：<font color=#39c5bb><strong>最优子结构，无后效性，子问题重叠</strong></font>。</p><h2 id="最优子结构"><a href="#最优子结构" class="headerlink" title="最优子结构"></a>最优子结构</h2><p>具有最优子结构也可能是适合用贪心的方法求解。</p><p>注意要确保我们考察了最优解中用到的所有子问题。</p><ul><li>证明问题最优解的第一个组成部分是做出一个选择；</li><li>对于一个给定问题，在其可能的第一步选择中，假定你已经知道哪种选择才会得到最优解。你现在并不关心这种选择具体是如何得到的，只是假定已经知道了这种选择；</li><li>给定可获得的最优解的选择后，确定这次选择会产生哪些子问题，以及如何最好地刻画子问题空间；</li><li>证明作为构成原问题最优解的组成部分，每个子问题的解就是它本身的最优解。方法是反证法，考虑加入某个子问题的解不是其自身的最优解，那么就可以从原问题的解中用该子问题的最优解替换掉当前的非最优解，从而得到原问题的一个更优的解，从而与原问题最优解的假设矛盾。</li><li>要保持子问题空间尽量简单，只在必要时扩展。</li></ul><p>最优子结构的不同体现在两个方面：</p><ul><li>原问题的最优解中涉及多少个子问题；</li><li>确定最优解使用哪些子问题时，需要考察多少种选择。</li><li>子问题图中每个定点对应一个子问题，而需要考察的选择对应关联至子问题顶点的边。</li></ul><h2 id="无后效性"><a href="#无后效性" class="headerlink" title="无后效性"></a>无后效性</h2><p>已经求解的子问题，不会再受到后续决策的影响。</p><h2 id="子问题重叠"><a href="#子问题重叠" class="headerlink" title="子问题重叠"></a>子问题重叠</h2><p>如果有大量的重叠子问题，我们可以用空间将这些子问题的解存储下来，避免重复求解相同的子问题，从而提升效率。<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[OI-wiki](https://oi-wiki.org/dp/basic/)">[1]</span></a></sup></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://oi-wiki.org/dp/basic/">OI-wiki</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>动态规划笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分治</title>
    <link href="/2024/07/20/%E5%88%86%E6%B2%BB/"/>
    <url>/2024/07/20/%E5%88%86%E6%B2%BB/</url>
    
    <content type="html"><![CDATA[<p>分治，简而言之就是“分而治之”，就是将一个复杂的问题分割成与原问题结构相同几个的子问题，进而进行求解。</p><h1 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h1><p>二分是分治的一种特殊情况，也是分治中最常用的情况之一。二分法即每一次分治都将原问题分割成与原问题结构相同2个的子问题，进而进行求解。</p><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><p>二分查找是一种在有序数组中查找元素的算法。</p><p>如果仅仅是在一个递增（或递减）的数组中寻找一个等于（大于，小于，不大于或不小于）给定值的元素时，我们可以直接使用STL。</p><p><code>upper_bound(a+1,a+n+1,x)</code>：在长度为n递增数组a中查找第一个大于x的元素的地址，如果未找到则返回-1.</p><p><code>lower_bound(a+1,a+n+1,x)</code>：在长度为n递增数组a中查找第一个大于等于x的元素的地址，如果未找到则返回-1.</p><p class="note note-warning">注意：由于以上两函数返回的是地址，所以如果要得到所求元素的下标的话还需减去a。</p><h2 id="二分答案"><a href="#二分答案" class="headerlink" title="二分答案"></a>二分答案</h2><p>有时我们需要处理的序列和要查找的元素更加复杂，则不能用STL来求解。而且有时我们会遇到没有具体序列，但需要我们在一个具体的数据区间内寻找答案而且朴素的枚举法会超时的情况。这时我们就需要用二分答案来求解。</p><p>我们还是以在单调递增区间内查找元素为例。</p><p>我们考虑在处理区间[l,r]时，取区间的中点mid，将原区间分割成[l,mid]和[mid+1,r]两个区间。如果$a_{mid}$大于等于x，则说明答案在mid的左侧，取区间[l,mid]；否则说明答案在mid的右侧，取区间[mid+1,r]。<br>实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">binary_search</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">while</span> (l &lt;= r)<br>    &#123;<br>        <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (a[mid] &gt;= r)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (a[mid] == r)<br>                res = mid;  <span class="hljs-comment">//标记答案</span><br>            r = mid;    <span class="hljs-comment">//分治1</span><br>            <span class="hljs-comment">//特别地，如果已经有答案了的话，由于不知道序列a是否已去重，所以可能</span><br>            <span class="hljs-comment">//出现下标更小的答案，所以还要继续查找</span><br>        &#125;<br>        <span class="hljs-keyword">else</span><br>            l = mid + <span class="hljs-number">1</span>;    <span class="hljs-comment">//分治2</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><p>例题：<a class="btn" href="https://www.luogu.com.cn/problem/P1873" title="P1873 [COCI 2011/2012 #5] EKO / 砍树">P1873 [COCI 2011&#x2F;2012 #5] EKO &#x2F; 砍树</a></p><p>这道题目中，我们明显可以在区间$[1,4\times10^5]$内枚举锯片高度进行求解，但这样的时间复杂度为$O(4\times10^5n)$，明显超时。</p><p>我们对$[1,4\times10^5]$进行二分，那么就可以将时间复杂度降至$O(\log(4\times10^5)n)$，可以AC。</p><p><del>至于过程具体怎么求，不就贪心吗</del></p><p>参考代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> a[<span class="hljs-number">1000001</span>], l, r, ans;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">long</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">if</span> (a[i] &gt; x)<br>            tot += a[i] - x;<span class="hljs-comment">//贪心求锯下的木材总长度</span><br>    <span class="hljs-keyword">return</span> tot &gt;= m;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> <span class="hljs-type">const</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;a[i]);<br>        r = <span class="hljs-built_in">max</span>(r, a[i]);<br>        <span class="hljs-comment">//将区间[1,400000]的最大值降至当前树木的最大高度，进一步见笑时间复杂度</span><br>    &#125;<br>    <span class="hljs-keyword">while</span> (l &lt;= r)<br>    &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(mid))<br>            ans = mid, l = mid + <span class="hljs-number">1</span>; <span class="hljs-comment">//如果锯多了，提高锯片</span><br>        <span class="hljs-keyword">else</span><br>            r = mid - <span class="hljs-number">1</span>;    <span class="hljs-comment">//如果锯少了，降低锯片</span><br>    &#125;<span class="hljs-comment">//二分</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="拓展：根号分治-1"><a href="#拓展：根号分治-1" class="headerlink" title="拓展：根号分治[^1]"></a>拓展：根号分治[^1]</h2><p>有人说，根号分治是一种“优雅的暴力”。</p><p>对于这种看法，我表示：</p><p><strong><font color=red>优雅，实在是太优雅了！</font></strong></p><p>例题：<a class="btn" href="https://www.luogu.com.cn/problem/P3396" title="P1873 [P3396 哈希冲突">P3396 哈希冲突</a></p><p>这道题如果使用暴力的话，每次询问的时间复杂度为O(n)，修改的时间复杂度为O(1)。</p><p>这题暴力比较快速，但是多组数据有弥补了这一部分，但是如果询问次数达到本题的数据规模的话，就会显得时间有点超，所以建议在做本题时，先使用预处理。<a class="btn" href="https://www.bilibili.com/video/BV1Yz42117vf/?vd_source=ed7dbb8e1185f9737aad12a73207198e" title="手动狗头">原版</a></p><p>我们考虑预处理$\operatorname{f}(i,j)&#x3D;\sum_{x\in{a}}^{x\equiv j(\mod{i})}x$，则我们可以得出递推式：<br>$$<br>\operatorname{f}(i,j\mod{i})&#x3D;\sum_{i&#x3D;1}^{n}a_j<br>$$<br>时间复杂度为$O(n^2)$，超得更厉害了。</p><p>那我们就没办法了吗？</p><p>我们刚才所说的询问的时间复杂度其实是最差时间复杂度。如果我们更精确地计算的话，其实时间复杂度是$O(\frac{n}{y})$。可见决定循环次数的其实是模数y，当模数y过小时，就会超时。</p><p>我们不妨将所有小于等于$\sqrt{n}$的y全部预处理，其他的y值则采用暴力，那么预处理的时间复杂度为$O(n\sqrt{n})$,查询和修改的时间复杂度均为$O(\sqrt{n})$，就可以完美地AC这道题。</p><p>这就是神奇的根号分治，在根号以下使用一个算法，在根号以上再使用一个算法，使两算法的时间复杂度均被降低，达到优化的目的。</p><p>参考代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>ll n, m, a[<span class="hljs-number">150005</span>], f[<span class="hljs-number">390</span>][<span class="hljs-number">390</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> <span class="hljs-type">const</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;a[i]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j * j &lt;= n; j++)<br>            f[j][i % j] += a[i];    <span class="hljs-comment">//预处理</span><br>    <span class="hljs-keyword">while</span> (m--)<br>    &#123;<br>        <span class="hljs-type">char</span> cmd;<br>        <span class="hljs-type">int</span> x, y;<br>        cin &gt;&gt; cmd &gt;&gt; x &gt;&gt; y;<br>        <span class="hljs-keyword">if</span> (cmd == <span class="hljs-string">&#x27;A&#x27;</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (x * x &lt;= n)<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, f[x][y]);    <span class="hljs-comment">//根号分治</span><br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                ll ans = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = y; i &lt;= n; i += x)<br>                    ans += a[i];<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>            &#125;<span class="hljs-comment">//暴力</span><br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i * i &lt;= n; i++)<br>                f[i][x % i] += y - a[x];<br>            a[x] = y;<br>        &#125;<span class="hljs-comment">//修改</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="三分法"><a href="#三分法" class="headerlink" title="三分法"></a>三分法</h1><p>例题：<a class="btn" href="https://www.luogu.com.cn/problem/P3382" title="P3382 三分">P3382 三分</a><br>求单峰函数的极值我们当然也可以通过导数利用二分求解，但是有些函数是真的不好导。这时候我们就要用到三分法。</p><p>三分也是分治的一种特殊情况，用于解决函数区间极值问题。</p><p>对于如下的函数$f(x)$，点E为曲线AB，即[l,r]之间的极值点。在AB之间任取两点C和D，横坐标分别为lmid和rmid，若$f(lmid)&lt;f(rmid)$，则说明[rmid,r]之间$f(x)$单调递增且点E不在此区间内，可以删除，反之亦然。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/vu21gmm7.png"></p><p>参考代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">double</span> eps = <span class="hljs-number">1e-6</span>;    <span class="hljs-comment">//题目要求误差为10^-5，但是要多取一位</span><br><span class="hljs-type">double</span> l, r, a[<span class="hljs-number">15</span>];<br><span class="hljs-type">int</span> n;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">double</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">double</span> res = <span class="hljs-number">0</span>, t = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; i++)<br>        res += a[i] * t, t *= x;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<span class="hljs-comment">//求函数值</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> <span class="hljs-type">const</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%lf%lf&quot;</span>, &amp;n, &amp;l, &amp;r);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n; i &gt;= <span class="hljs-number">0</span>; i--)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lf&quot;</span>, &amp;a[i]);<br>    <span class="hljs-keyword">while</span> (r - l &gt; eps)<br>    &#123;<br>        <span class="hljs-type">double</span> mid = (l + r) / <span class="hljs-number">2</span>, lmid = mid - eps, rmid = mid + eps;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">f</span>(lmid) &lt; <span class="hljs-built_in">f</span>(rmid))<br>            l = mid;<br>        <span class="hljs-keyword">else</span><br>            r = mid;<br>    &#125;<span class="hljs-comment">//三分</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.5lf&quot;</span>, l);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[^1]：<a href="https://github.com/enkerewpo/OI-Public-Library/blob/master/IOI%E4%B8%AD%E5%9B%BD%E5%9B%BD%E5%AE%B6%E5%80%99%E9%80%89%E9%98%9F%E8%AE%BA%E6%96%87/%E5%9B%BD%E5%AE%B6%E9%9B%86%E8%AE%AD%E9%98%9F2014%E8%AE%BA%E6%96%87%E9%9B%86.pdf">《根号算法——不只是分块》（王悦同）</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>算法笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分块</title>
    <link href="/2024/07/16/%E5%88%86%E5%9D%97/"/>
    <url>/2024/07/16/%E5%88%86%E5%9D%97/</url>
    
    <content type="html"><![CDATA[<p>分块是一种最基础区间优化算法，其维护的内容需满足符合结合律的运算。其内涵主要是将一段连续的数据分成几个长度相等或不相等的区间，当调用区间整体时便可以节省时间。</p><h1 id="块状数组"><a href="#块状数组" class="headerlink" title="块状数组"></a>块状数组</h1><p>以<a class="btn" href="https://loj.ac/p/6280" title="数列分块入门4">数列分块入门4</a>为例。</p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>首先块状数组需要分别记录每个元素的值，每个块维护的区间的值，以及每个元素所在的块的编号。</p><p>不妨令原数组为a[i]，分块后的数组为k[i]，a[i]在第id[i]个块中，每个块长为len，同时，为了使对元素的修改与对区间的修改相统一，我们需要一个与线段树中的懒标记功能类似的tag[i]。</p><p>易得式子$id_i&#x3D;\lfloor \frac{i-1}{len}\rfloor+1$</p><p>则有以下初始化代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)id[i]=(i<span class="hljs-number">-1</span>)/len+<span class="hljs-number">1</span>,k[id[i]]+=a[i];<br></code></pre></td></tr></table></figure><h2 id="单点修改"><a href="#单点修改" class="headerlink" title="单点修改"></a>单点修改</h2><p>修改元素与所在区间即可。</p><p>参考代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify_data</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    a[x] += y, k[id[x]] += y;<br>&#125;<br></code></pre></td></tr></table></figure><p><del>但很显然，这道题不需要用到这段代码</del></p><h2 id="区间修改"><a href="#区间修改" class="headerlink" title="区间修改"></a>区间修改</h2><p>此时我们需要进行分类讨论。</p><p>当区间左端点与右端点在同一个块中时，暴力修改即可。</p><p>当区间左端点与右端点不在同一个块中时，可以将该区间在左端点块中的部分和在右端点块中的部分分别暴力修改，再将区间中的整块修改。<br><strong><font color=#39c5bb>不要忘了标记！</font></strong></p><p>参考代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify_range</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (id[l] == id[r])<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; i &lt;= r; i++)<br>            a[i] += y, k[id[i]] += y;<br>        <span class="hljs-keyword">return</span>;<br>    &#125; <span class="hljs-comment">// 分类1</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; id[i] == id[l]; i++)<br>        a[i] += y, k[id[i]] += y; <span class="hljs-comment">// 分类2的第一部分</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = id[l] + <span class="hljs-number">1</span>, i &lt; id[r]; i++)<br>        tag[i] += y, k[i] += len * y; <span class="hljs-comment">// 分类2的第二部分</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = r; id[i] == id[r]; i--)<br>        a[i] += y, k[id[i]] += y; <span class="hljs-comment">// 分类2的第三部分</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="单点查询"><a href="#单点查询" class="headerlink" title="单点查询"></a>单点查询</h2><p>直接查询即可。同样，让我们大声喊出：<br><strong><font color=#39c5bb>不要忘了标记！</font></strong></p><p>参考代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query_data</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    a[x] += b[id[x]], b[id[x]] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> a[x] % y;<br>&#125;<br></code></pre></td></tr></table></figure><p><del>但很显然，这道题也不需要用到这段代码</del></p><h2 id="区间查询"><a href="#区间查询" class="headerlink" title="区间查询"></a>区间查询</h2><p>与区间修改思路相似。</p><p>重要的事情说三遍：<br><strong><font color=#39c5bb>不要忘了标记！</font></strong></p><p>参考代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">query_range</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (id[l] == id[r])<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; i &lt;= r; i++)<br>            res = (res + a[i] + b[id[i]]) % y;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125; <span class="hljs-comment">// 分类1</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; id[i] == id[l]; i++)<br>    res = (res + a[i] + tag[id[i]]) % y; <span class="hljs-comment">// 分类2的第一部分</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = id[l] + <span class="hljs-number">1</span>, i &lt; id[r]; i++)<br>    res = (res + k[i]) % y; <span class="hljs-comment">// 分类2的第二部分</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = r; id[i] == id[r]; i--)<br>    res = (res + a[i] + tag[id[i]]) % y; <span class="hljs-comment">// 分类2的第三部分</span><br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>块状数组区间修改和查询的最优时间复杂度为$O(\sqrt{n})$</p>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-9d184c8c" role="button" aria-expanded="false" aria-controls="collapse-9d184c8c">        <div class="fold-arrow">▶</div>证明      </div>      <div class="fold-collapse collapse" id="collapse-9d184c8c">        <div class="fold-content">          <p>易得块状数组区间修改和查询的最优时间复杂度为$O(len+\frac{n}{len})$。</p><p>由均值不等式可得<br>$$<br>len+\frac{n}{len}\ge\sqrt{len\cdot\frac{n}{len}}&#x3D;\sqrt{n}<br>$$<br>当且仅当$len&#x3D;\sqrt{n}$时，等号成立。</p><p>$\therefore$块状数组区间修改和查询的最优时间复杂度为$O(\sqrt{n})$</p>        </div>      </div>    </div><p>同时我们还可以顺便得出要使时间复杂度最优我们需要取$len&#x3D;\lfloor\sqrt{n}\rfloor$。</p><h2 id="完整模版"><a href="#完整模版" class="headerlink" title="完整模版"></a>完整模版</h2><p>例题题解：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>ll n, id[<span class="hljs-number">50005</span>], len, k[<span class="hljs-number">230</span>], b[<span class="hljs-number">230</span>], a[<span class="hljs-number">50005</span>];<br><span class="hljs-function">ll <span class="hljs-title">query</span><span class="hljs-params">(ll l, ll r, ll m)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (id[l] == id[r])<br>    &#123;<br>        <span class="hljs-keyword">for</span> (ll i = l; i &lt;= r; i++)<br>            res = (res + a[i] + b[id[i]]) % m;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (ll i = l; id[i] == id[l]; i++)<br>        res = (res + a[i] + b[id[i]]) % m;<br>    <span class="hljs-keyword">for</span> (ll i = id[l] + <span class="hljs-number">1</span>; i &lt; id[r]; i++)<br>        res = (res + k[i]) % m;<br>    <span class="hljs-keyword">for</span> (ll i = r; id[i] == id[r]; i--)<br>        res = (res + a[i] + b[id[i]]) % m;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(ll l, ll r, ll x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (id[l] == id[r])<br>    &#123;<br>        <span class="hljs-keyword">for</span> (ll i = l; i &lt;= r; i++)<br>            a[i] += x, k[id[i]] += x;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (ll i = l; id[i] == id[l]; i++)<br>        a[i] += x, k[id[i]] += x;<br>    <span class="hljs-keyword">for</span> (ll i = id[l] + <span class="hljs-number">1</span>; i &lt; id[r]; i++)<br>        b[i] += x, k[i] += len * x;<br>    <span class="hljs-keyword">for</span> (ll i = r; id[i] == id[r]; i--)<br>        a[i] += x, k[id[i]] += x;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> <span class="hljs-type">const</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;n);<br>    len = <span class="hljs-number">1ll</span> * <span class="hljs-built_in">sqrt</span>(n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;a[i]);<br>        id[i] = (i - <span class="hljs-number">1</span>) / len + <span class="hljs-number">1</span>, k[id[i]] += a[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        ll opt, l, r, c;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld%lld%lld&quot;</span>, &amp;opt, &amp;l, &amp;r, &amp;c);<br>        <span class="hljs-keyword">if</span> (opt)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, <span class="hljs-built_in">query</span>(l, r, c + <span class="hljs-number">1</span>));<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">modify</span>(l, r, c);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="整除分块"><a href="#整除分块" class="headerlink" title="整除分块"></a>整除分块</h1><p>例题：<a class="btn" href="https://www.luogu.com.cn/problem/P1403" title="P1403[AHOI2005]约数研究">P1403[AHOI2005]约数研究</a></p><p>我们不妨将问题拆开，既然$f(i)$代表i的约数个数，那么令$g(i)$为在[1,n]中含有约数i的数的个数，则可以得出<br>$$<br>\sum_{i&#x3D;1}^n f(i)&#x3D;\sum_{i&#x3D;1}^n g(i)<br>$$<br>易得<br>$$<br>g(i)&#x3D;\lfloor \frac{n}{i}\rfloor<br>$$<br>所以可得<br>$$<br>\sum_{i&#x3D;1}^n f(i)&#x3D;\sum_{i&#x3D;1}^n \lfloor \frac{n}{i}\rfloor<br>$$<br>于是此题就变成了一个整除分块的模板题。</p><p>通过打表，我们可以发现对于某些i所对应的$\lfloor \frac{n}{i}\rfloor$是相同的。例如当n&#x3D;100时，$\forall i\in[26,33],\lfloor \frac{n}{i}\rfloor&#x3D;3;\forall i\in[34,50],\lfloor \frac{n}{i}\rfloor&#x3D;2$。所以我们可以按照$\lfloor \frac{n}{i}\rfloor$给i分块，易得每一个块维护的区间是$[l,\frac{n}{\lfloor \frac{n}{l}\rfloor}]$，这样我们就可以得到一个$O(\sqrt{n})$的算法。</p><p>参考代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>ll n, ans;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> <span class="hljs-type">const</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> l = <span class="hljs-number">1</span>, r; l &lt;= n; l = r + <span class="hljs-number">1</span>)<br>        r = n / (n / l), ans += (r - l + <span class="hljs-number">1</span>) * (n / l);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>位运算</title>
    <link href="/2024/07/11/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    <url>/2024/07/11/%E4%BD%8D%E8%BF%90%E7%AE%97/</url>
    
    <content type="html"><![CDATA[<p>根据计算机的存储方式，一般的高级语言中会提供位运算。</p><h1 id="位运算的内容"><a href="#位运算的内容" class="headerlink" title="位运算的内容"></a>位运算的内容</h1><table><thead><tr><th align="center">运算名称</th><th align="center">运算符号</th><th align="center">运算规则</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center">与运算</td><td align="center">&amp;</td><td align="center">1&amp;0&#x3D;0,0&amp;1&#x3D;0,0&amp;0&#x3D;0,1&amp;1&#x3D;1</td><td align="center">$4&amp;5&#x3D;(100)_2&amp;(101)_2&#x3D;1$</td></tr><tr><td align="center">或运算</td><td align="center">|</td><td align="center">1|0&#x3D;1,0|1&#x3D;1,0|0&#x3D;0,1|1&#x3D;1</td><td align="center">$1|4&#x3D;(001)_2|(100)_2&#x3D;(101)_2&#x3D;5$</td></tr><tr><td align="center">异或运算</td><td align="center">^</td><td align="center">1^0&#x3D;1,0^1&#x3D;1,0^0&#x3D;0,1^1&#x3D;0</td><td align="center">$1|9&#x3D;(0001)_2|(1001)_2&#x3D;(1000)_2&#x3D;8$</td></tr><tr><td align="center">左移运算</td><td align="center">&lt;&lt;</td><td align="center">a&lt;&lt;b表示在二进制下的a的右端添加b个0</td><td align="center">$1&lt;&lt;9&#x3D;(1000000000)_2&#x3D;256$</td></tr><tr><td align="center">右移运算</td><td align="center">&gt;&gt;</td><td align="center">a&gt;&gt;b表示在二进制下的a从右端开始去除b个数</td><td align="center">$8&gt;&gt;&#x3D;(1000)_2&gt;&gt;1&#x3D;(100)_2&#x3D;4$</td></tr><tr><td align="center">取反运算</td><td align="center">~</td><td align="center">~a表示将a中的0变成1,1变成0</td><td align="center">$~(10)&#x3D;~(1010)_2&#x3D;(0101)_2&#x3D;5$</td></tr></tbody></table><p class="note note-warning"><ul><li><p>位运算都是用补码进行的；</p></li><li><p>数字在计算机中的存储包括符号位（正数为0，负数为1,0分正负）和后面的数字位；</p></li><li><p>数字的原码、反码、补码：</p></li><li><ul><li>正数的原码、反码、补码相同，均为符号位拼上该数的二进制表示；</li></ul></li><li><ul><li>负数的符号位为1，原码需拼上该数绝对值的二进制，反码需拼上该数绝对值的二进制取反后的结果，补码为反码+1；</li></ul></li><li><ul><li>当一个正数超过它的数据类型可存储的上限时，会占据符号位，这就是数据上溢的原因；</li></ul></li><li><ul><li>当一个负数超过它的数据类型可存储的下限时，由反码转化为补码时会进位至符号位使符号位由1变成0，这就是数据下溢的原因。</p></li></ul></li></ul><h1 id="位运算的应用"><a href="#位运算的应用" class="headerlink" title="位运算的应用"></a>位运算的应用</h1><h2 id="二进制下的集合操作"><a href="#二进制下的集合操作" class="headerlink" title="二进制下的集合操作"></a>二进制下的集合操作</h2><p>用1表示开关开，0表示开关关，我们就可以用二进制来表示集合，用位运算来表示集合运算，这样我们就可以用一个数来表示压位DP的状态了。</p><table><thead><tr><th align="center">集合运算</th><th align="center">位运算</th></tr></thead><tbody><tr><td align="center">$a\cup b$</td><td align="center">a|b</td></tr><tr><td align="center">$a\cap b$</td><td align="center">a|b</td></tr><tr><td align="center">$\overline{a}$</td><td align="center">a|b</td></tr><tr><td align="center">$a\backslash b$</td><td align="center">a|b</td></tr><tr><td align="center">$a\Delta b$</td><td align="center">a|b</td></tr></tbody></table><h2 id="其他运算操作"><a href="#其他运算操作" class="headerlink" title="其他运算操作"></a>其他运算操作</h2><p>$a\cdot2^b$:<code>a&lt;&lt;b</code></p><p>$\left\lfloor \frac{a}{2^b} \right\rfloor$:<code>a&lt;&lt;b</code></p><p>取绝对值：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Abs</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> (x^(x&gt;&gt;<span class="hljs-number">31</span>))-(x&gt;&gt;<span class="hljs-number">31</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>取最值：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Max</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> (b&amp;(a-b&gt;&gt;<span class="hljs-number">31</span>))|(a&amp;(~(a-b)&gt;&gt;<span class="hljs-number">31</span>));<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Min</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> (a&amp;(a-b&gt;&gt;<span class="hljs-number">31</span>))|(b&amp;(~(a-b)&gt;&gt;<span class="hljs-number">31</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>a与b同号：<code>(a^b)&gt;=0</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>数学笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>进位制</title>
    <link href="/2024/07/11/%E8%BF%9B%E4%BD%8D%E5%88%B6/"/>
    <url>/2024/07/11/%E8%BF%9B%E4%BD%8D%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="进位制的历史"><a href="#进位制的历史" class="headerlink" title="进位制的历史"></a>进位制的历史</h2><p>从人类出现文明，开始生产时，计数的方式就成为一个不可或缺的工具。</p>]]></content>
    
    
    
    <tags>
      
      <tag>数学笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>枚举</title>
    <link href="/2024/02/21/%E6%9E%9A%E4%B8%BE/"/>
    <url>/2024/02/21/%E6%9E%9A%E4%B8%BE/</url>
    
    <content type="html"><![CDATA[<p>枚举，就是列举所有情况，最终得出答案。</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p><a class="btn" href="https://www.luogu.com.cn/problem/P1085" title="洛谷P1085 [NOIP2004 普及组] 不高兴的津津">洛谷P1085 [NOIP2004 普及组] 不高兴的津津</a></p><p>枚举一周的每一天打擂台即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> x, y, maxn = <span class="hljs-number">8</span>, day;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> <span class="hljs-type">const</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">8</span>; i++)<br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);<br><span class="hljs-keyword">if</span> (x + y &gt; maxn)<br>maxn = x + y, day = i;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, day);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>模拟</title>
    <link href="/2024/02/21/%E6%A8%A1%E6%8B%9F/"/>
    <url>/2024/02/21/%E6%A8%A1%E6%8B%9F/</url>
    
    <content type="html"><![CDATA[<p>没有什么可讲的，就是完全跟着题意做。</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p><a class="btn" href="https://www.luogu.com.cn/problem/P1047" title="洛谷P1047 [NOIP2005 普及组] 校门外的树">洛谷P1047 [NOIP2005 普及组] 校门外的树</a></p><p>AC代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">bool</span> l[<span class="hljs-number">10005</span>];<br><span class="hljs-type">int</span> L, M, s, m[<span class="hljs-number">2</span>][<span class="hljs-number">105</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> <span class="hljs-type">const</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;L, &amp;M);<br>L++;<br><span class="hljs-built_in">memset</span>(l, <span class="hljs-number">1</span>, <span class="hljs-built_in">sizeof</span>(l));<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; M; i++)<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;m[<span class="hljs-number">0</span>][i], &amp;m[<span class="hljs-number">1</span>][i]);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; L; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; M; j++)<br><span class="hljs-keyword">if</span> (i &gt;= m[<span class="hljs-number">0</span>][j] &amp;&amp; i &lt;= m[<span class="hljs-number">1</span>][j])<br>l[i] = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (l[i])<br>s++;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, s);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试博客</title>
    <link href="/2024/02/03/%E6%B5%8B%E8%AF%95%E5%8D%9A%E5%AE%A2/"/>
    <url>/2024/02/03/%E6%B5%8B%E8%AF%95%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p class="note note-primary">primary</p><p class="note note-secondary">secondary</p><p class="note note-success">success</p><p class="note note-danger">danger</p><p class="note note-warning">warning</p><p class="note note-info">info</p><p class="note note-lights">lights</p><p><span class="label label-primary">primary</span><span class="label label-default">default</span><span class="label label-info">info</span><span class="label label-success">success</span><span class="label label-warning">warning</span><span class="label label-danger">danger</span></p>    <div class="fold">      <div class="fold-title fold-primary collapsed" data-toggle="collapse" href="#collapse-b5714680" role="button" aria-expanded="false" aria-controls="collapse-b5714680">        <div class="fold-arrow">▶</div>title      </div>      <div class="fold-collapse collapse" id="collapse-b5714680">        <div class="fold-content">          <p>需要折叠的一段内容，支持 markdown</p>        </div>      </div>    </div>    <div class="fold">      <div class="fold-title fold-secondary collapsed" data-toggle="collapse" href="#collapse-b5714680" role="button" aria-expanded="false" aria-controls="collapse-b5714680">        <div class="fold-arrow">▶</div>title      </div>      <div class="fold-collapse collapse" id="collapse-b5714680">        <div class="fold-content">          <p>需要折叠的一段内容，支持 markdown</p>        </div>      </div>    </div>    <div class="fold">      <div class="fold-title fold-success collapsed" data-toggle="collapse" href="#collapse-b5714680" role="button" aria-expanded="false" aria-controls="collapse-b5714680">        <div class="fold-arrow">▶</div>title      </div>      <div class="fold-collapse collapse" id="collapse-b5714680">        <div class="fold-content">          <p>需要折叠的一段内容，支持 markdown</p>        </div>      </div>    </div>    <div class="fold">      <div class="fold-title fold-danger collapsed" data-toggle="collapse" href="#collapse-b5714680" role="button" aria-expanded="false" aria-controls="collapse-b5714680">        <div class="fold-arrow">▶</div>title      </div>      <div class="fold-collapse collapse" id="collapse-b5714680">        <div class="fold-content">          <p>需要折叠的一段内容，支持 markdown</p>        </div>      </div>    </div>    <div class="fold">      <div class="fold-title fold-warning collapsed" data-toggle="collapse" href="#collapse-b5714680" role="button" aria-expanded="false" aria-controls="collapse-b5714680">        <div class="fold-arrow">▶</div>title      </div>      <div class="fold-collapse collapse" id="collapse-b5714680">        <div class="fold-content">          <p>需要折叠的一段内容，支持 markdown</p>        </div>      </div>    </div>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-b5714680" role="button" aria-expanded="false" aria-controls="collapse-b5714680">        <div class="fold-arrow">▶</div>title      </div>      <div class="fold-collapse collapse" id="collapse-b5714680">        <div class="fold-content">          <p>需要折叠的一段内容，支持 markdown</p>        </div>      </div>    </div>    <div class="fold">      <div class="fold-title fold-lights collapsed" data-toggle="collapse" href="#collapse-b5714680" role="button" aria-expanded="false" aria-controls="collapse-b5714680">        <div class="fold-arrow">▶</div>title      </div>      <div class="fold-collapse collapse" id="collapse-b5714680">        <div class="fold-content">          <p>需要折叠的一段内容，支持 markdown</p>        </div>      </div>    </div>            <input type="checkbox"  checked="checked">勾选框          <p><a class="btn" href="https://zhrleo.github.io" title="zhrleo">按钮</a></p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://cdn.luogu.com.cn/upload/image_hosting/aoi263ym.png"></div><div class="group-image-wrap"><img src="https://cdn.luogu.com.cn/upload/image_hosting/aoi263ym.png"></div><div class="group-image-wrap"><img src="https://cdn.luogu.com.cn/upload/image_hosting/aoi263ym.png"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://cdn.luogu.com.cn/upload/image_hosting/aoi263ym.png"></div><div class="group-image-wrap"><img src="https://cdn.luogu.com.cn/upload/image_hosting/aoi263ym.png"></div></div></div><pre><code class="mermaid">classDiagramClass01 &lt;|-- AveryLongClass : CoolClass03 *-- Class04Class05 o-- Class06Class07 .. Class08Class09 --&gt; C2 : Where am i?Class09 --* C3Class09 --|&gt; Class07Class07 : equals()Class07 : Object[] elementDataClass01 : size()Class01 : int chimpClass01 : int gorillaClass08 &lt;--&gt; C2: Cool label</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/02/02/hello-world/"/>
    <url>/2024/02/02/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
