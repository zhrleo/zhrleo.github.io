<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>分块</title>
    <link href="/2024/07/16/%E5%88%86%E5%9D%97/"/>
    <url>/2024/07/16/%E5%88%86%E5%9D%97/</url>
    
    <content type="html"><![CDATA[<p>分块是一种最基础区间优化算法，其维护的内容需满足符合结合律的运算。其内涵主要是将一段连续的数据分成几个长度相等或不相等的区间，当调用区间整体时便可以节省时间。</p><h1 id="块状数组"><a href="#块状数组" class="headerlink" title="块状数组"></a>块状数组</h1><p>以<a href="https://loj.ac/p/6280">数列分块入门4</a>和为例。</p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>首先块状数组需要分别记录每个元素的值，每个块维护的区间的值，以及每个元素所在的块的编号。</p><p>不妨令原数组为a[i]，分块后的数组为k[i]，a[i]在第id[i]个块中，每个块长为len，同时，为了使对元素的修改与对区间的修改相统一，我们需要一个与线段树中的懒标记功能类似的tag[i]。</p><p>易得式子$id_i&#x3D;\lfloor \frac{i-1}{len}\rfloor+1$</p><p>则有以下初始化代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)id[i]=(i<span class="hljs-number">-1</span>)/len+<span class="hljs-number">1</span>,k[id[i]]+=a[i];<br></code></pre></td></tr></table></figure><h2 id="单点修改"><a href="#单点修改" class="headerlink" title="单点修改"></a>单点修改</h2><p>修改元素与所在区间即可。</p><p>参考代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify_data</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    a[x] += y, k[id[x]] += y;<br>&#125;<br></code></pre></td></tr></table></figure><p><del>但很显然，这道题不需要用到这段代码</del></p><h2 id="区间修改"><a href="#区间修改" class="headerlink" title="区间修改"></a>区间修改</h2><p>此时我们需要进行分类讨论。</p><p>当区间左端点与右端点在同一个块中时，暴力修改即可。</p><p>当区间左端点与右端点不在同一个块中时，可以将该区间在左端点块中的部分和在右端点块中的部分分别暴力修改，再将区间中的整块修改。<br><strong><font color=#39c5bb>不要忘了标记！</font></strong></p><p>参考代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify_range</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (id[l] == id[r])<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; i &lt;= r; i++)<br>            a[i] += y, k[id[i]] += y;<br>        <span class="hljs-keyword">return</span>;<br>    &#125; <span class="hljs-comment">// 分类1</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; id[i] == id[l]; i++)<br>        a[i] += y, k[id[i]] += y; <span class="hljs-comment">// 分类2的第一部分</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = id[l] + <span class="hljs-number">1</span>, i &lt; id[r]; i++)<br>        tag[i] += y, k[i] += len * y; <span class="hljs-comment">// 分类2的第二部分</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = r; id[i] == id[r]; i--)<br>        a[i] += y, k[id[i]] += y; <span class="hljs-comment">// 分类2的第三部分</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="单点查询"><a href="#单点查询" class="headerlink" title="单点查询"></a>单点查询</h2><p>直接查询即可。同样，让我们大声喊出：**<font color=#39c5bb>不要忘了标记！</font>**</p><p>参考代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query_data</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    a[x] += b[id[x]], b[id[x]] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> a[x] % y;<br>&#125;<br></code></pre></td></tr></table></figure><p><del>但很显然，这道题也不需要用到这段代码</del></p><h2 id="区间查询"><a href="#区间查询" class="headerlink" title="区间查询"></a>区间查询</h2><p>与区间修改思路相似。</p><p>重要的事情说三遍：**<font color=#39c5bb>不要忘了标记！</font>**</p><p>参考代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">query_range</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (id[l] == id[r])<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; i &lt;= r; i++)<br>            res = (res + a[i] + b[id[i]]) % y;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125; <span class="hljs-comment">// 分类1</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; id[i] == id[l]; i++)<br>    res = (res + a[i] + tag[id[i]]) % y; <span class="hljs-comment">// 分类2的第一部分</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = id[l] + <span class="hljs-number">1</span>, i &lt; id[r]; i++)<br>    res = (res + k[i]) % y; <span class="hljs-comment">// 分类2的第二部分</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = r; id[i] == id[r]; i--)<br>    res = (res + a[i] + tag[id[i]]) % y; <span class="hljs-comment">// 分类2的第三部分</span><br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>块状数组区间修改和查询的最优时间复杂度为$O(\sqrt{n})$</p>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-9d184c8c" role="button" aria-expanded="false" aria-controls="collapse-9d184c8c">        <div class="fold-arrow">▶</div>证明      </div>      <div class="fold-collapse collapse" id="collapse-9d184c8c">        <div class="fold-content">          <p>易得块状数组区间修改和查询的最优时间复杂度为$O(len+\frac{n}{len})$。</p><p>由均值不等式可得<br>$$<br>len+\frac{n}{len}\ge\sqrt{len\cdot\frac{n}{len}}&#x3D;\sqrt{n}<br>$$<br>当且仅当$len&#x3D;\sqrt{n}$时，等号成立。</p><p>$\therefore$块状数组区间修改和查询的最优时间复杂度为$O(\sqrt{n})$</p>        </div>      </div>    </div><p>同时我们还可以顺便得出要使时间复杂度最优我们需要取$len&#x3D;\lfloor\sqrt{n}\rfloor$。</p><h2 id="完整模版"><a href="#完整模版" class="headerlink" title="完整模版"></a>完整模版</h2><p>例题题解：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>ll n, id[<span class="hljs-number">50005</span>], len, k[<span class="hljs-number">230</span>], b[<span class="hljs-number">230</span>], a[<span class="hljs-number">50005</span>];<br><span class="hljs-function">ll <span class="hljs-title">query</span><span class="hljs-params">(ll l, ll r, ll m)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (id[l] == id[r])<br>    &#123;<br>        <span class="hljs-keyword">for</span> (ll i = l; i &lt;= r; i++)<br>            res = (res + a[i] + b[id[i]]) % m;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (ll i = l; id[i] == id[l]; i++)<br>        res = (res + a[i] + b[id[i]]) % m;<br>    <span class="hljs-keyword">for</span> (ll i = id[l] + <span class="hljs-number">1</span>; i &lt; id[r]; i++)<br>        res = (res + k[i]) % m;<br>    <span class="hljs-keyword">for</span> (ll i = r; id[i] == id[r]; i--)<br>        res = (res + a[i] + b[id[i]]) % m;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(ll l, ll r, ll x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (id[l] == id[r])<br>    &#123;<br>        <span class="hljs-keyword">for</span> (ll i = l; i &lt;= r; i++)<br>            a[i] += x, k[id[i]] += x;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (ll i = l; id[i] == id[l]; i++)<br>        a[i] += x, k[id[i]] += x;<br>    <span class="hljs-keyword">for</span> (ll i = id[l] + <span class="hljs-number">1</span>; i &lt; id[r]; i++)<br>        b[i] += x, k[i] += len * x;<br>    <span class="hljs-keyword">for</span> (ll i = r; id[i] == id[r]; i--)<br>        a[i] += x, k[id[i]] += x;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> <span class="hljs-type">const</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;n);<br>    len = <span class="hljs-number">1ll</span> * <span class="hljs-built_in">sqrt</span>(n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;a[i]);<br>        id[i] = (i - <span class="hljs-number">1</span>) / len + <span class="hljs-number">1</span>, k[id[i]] += a[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        ll opt, l, r, c;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld%lld%lld&quot;</span>, &amp;opt, &amp;l, &amp;r, &amp;c);<br>        <span class="hljs-keyword">if</span> (opt)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, <span class="hljs-built_in">query</span>(l, r, c + <span class="hljs-number">1</span>));<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">modify</span>(l, r, c);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="整除分块"><a href="#整除分块" class="headerlink" title="整除分块"></a>整除分块</h1><p>例题：<a href="https://www.luogu.com.cn/problem/P1403">P1403[AHOI2005]约数研究</a></p><p>我们不妨将问题拆开，既然$f(i)$代表i的约数个数，那么令$g(i)$为在[1,n]中含有约数i的数的个数，则可以得出<br>$$<br>\sum_{i&#x3D;1}^n f(i)&#x3D;\sum_{i&#x3D;1}^n g(i)<br>$$<br>易得<br>$$<br>g(i)&#x3D;\lfloor \frac{n}{i}\rfloor<br>$$<br>所以可得<br>$$<br>\sum_{i&#x3D;1}^n f(i)&#x3D;\sum_{i&#x3D;1}^n \lfloor \frac{n}{i}\rfloor<br>$$<br>于是此题就变成了一个整除分块的模板题。</p><p>通过打表，我们可以发现对于某些i所对应的$\lfloor \frac{n}{i}\rfloor$是相同的。例如当n&#x3D;100时，$\forall i\in[26,33],\lfloor \frac{n}{i}\rfloor&#x3D;3;\forall i\in[34,50],\lfloor \frac{n}{i}\rfloor&#x3D;2$。所以我们可以按照$\lfloor \frac{n}{i}\rfloor$给i分块，易得每一个块维护的区间是$[l,\frac{n}{\lfloor \frac{n}{l}\rfloor}]$，这样我们就可以得到一个$O(\sqrt{n})$的算法。</p><p>参考代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>ll n, ans;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> <span class="hljs-type">const</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> l = <span class="hljs-number">1</span>, r; l &lt;= n; l = r + <span class="hljs-number">1</span>)<br>        r = n / (n / l), ans += (r - l + <span class="hljs-number">1</span>) * (n / l);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>位运算</title>
    <link href="/2024/07/11/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    <url>/2024/07/11/%E4%BD%8D%E8%BF%90%E7%AE%97/</url>
    
    <content type="html"><![CDATA[<p>根据计算机的存储方式，一般的高级语言中会提供位运算。</p><h1 id="位运算的内容"><a href="#位运算的内容" class="headerlink" title="位运算的内容"></a>位运算的内容</h1><table><thead><tr><th align="center">运算名称</th><th align="center">运算符号</th><th align="center">运算规则</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center">与运算</td><td align="center">&amp;</td><td align="center">1&amp;0&#x3D;0,0&amp;1&#x3D;0,0&amp;0&#x3D;0,1&amp;1&#x3D;1</td><td align="center">$4&amp;5&#x3D;(100)_2&amp;(101)_2&#x3D;1$</td></tr><tr><td align="center">或运算</td><td align="center">|</td><td align="center">1|0&#x3D;1,0|1&#x3D;1,0|0&#x3D;0,1|1&#x3D;1</td><td align="center">$1|4&#x3D;(001)_2|(100)_2&#x3D;(101)_2&#x3D;5$</td></tr><tr><td align="center">异或运算</td><td align="center">^</td><td align="center">1^0&#x3D;1,0^1&#x3D;1,0^0&#x3D;0,1^1&#x3D;0</td><td align="center">$1|9&#x3D;(0001)_2|(1001)_2&#x3D;(1000)_2&#x3D;8$</td></tr><tr><td align="center">左移运算</td><td align="center">&lt;&lt;</td><td align="center">a&lt;&lt;b表示在二进制下的a的右端添加b个0</td><td align="center">$1&lt;&lt;9&#x3D;(1000000000)_2&#x3D;256$</td></tr><tr><td align="center">右移运算</td><td align="center">&gt;&gt;</td><td align="center">a&gt;&gt;b表示在二进制下的a从右端开始去除b个数</td><td align="center">$8&gt;&gt;&#x3D;(1000)_2&gt;&gt;1&#x3D;(100)_2&#x3D;4$</td></tr><tr><td align="center">取反运算</td><td align="center">~</td><td align="center">~a表示将a中的0变成1,1变成0</td><td align="center">$~(10)&#x3D;~(1010)_2&#x3D;(0101)_2&#x3D;5$</td></tr></tbody></table>    <div class="fold">      <div class="fold-title fold-warning collapsed" data-toggle="collapse" href="#collapse-ddac42b8" role="button" aria-expanded="false" aria-controls="collapse-ddac42b8">        <div class="fold-arrow">▶</div>注意事项      </div>      <div class="fold-collapse collapse" id="collapse-ddac42b8">        <div class="fold-content">          <ul><li>位运算都是用补码进行的；</li><li>数字在计算机中的存储包括符号位（正数为0，负数为1,0分正负）和后面的数字位；</li><li>数字的原码、反码、补码：</li><li><ul><li>正数的原码、反码、补码相同，均为符号位拼上该数的二进制表示；</li></ul></li><li><ul><li>负数的符号位为1，原码需拼上该数绝对值的二进制，反码需拼上该数绝对值的二进制取反后的结果，补码为反码+1；</li></ul></li><li><ul><li>当一个正数超过它的数据类型可存储的上限时，会占据符号位，这就是数据上溢的原因；</li></ul></li><li><ul><li>当一个负数超过它的数据类型可存储的下限时，由反码转化为补码时会进位至符号位使符号位由1变成0，这就是数据下溢的原因。</li></ul></li></ul>        </div>      </div>    </div><h1 id="位运算的应用"><a href="#位运算的应用" class="headerlink" title="位运算的应用"></a>位运算的应用</h1><h2 id="二进制下的集合操作"><a href="#二进制下的集合操作" class="headerlink" title="二进制下的集合操作"></a>二进制下的集合操作</h2><p>用1表示开关开，0表示开关关，我们就可以用二进制来表示集合，用位运算来表示集合运算，这样我们就可以用一个数来表示压位DP的状态了。</p><table><thead><tr><th align="center">集合运算</th><th align="center">位运算</th></tr></thead><tbody><tr><td align="center">$a\cup b$</td><td align="center">a|b</td></tr><tr><td align="center">$a\cap b$</td><td align="center">a|b</td></tr><tr><td align="center">$\overline{a}$</td><td align="center">a|b</td></tr><tr><td align="center">$a\backslash b$</td><td align="center">a|b</td></tr><tr><td align="center">$a\Delta b$</td><td align="center">a|b</td></tr></tbody></table><h2 id="其他运算操作"><a href="#其他运算操作" class="headerlink" title="其他运算操作"></a>其他运算操作</h2><p>$a\cdot2^b$:<code>a&lt;&lt;b</code></p><p>$\left\lfloor \frac{a}{2^b} \right\rfloor$:<code>a&lt;&lt;b</code></p><p>取绝对值：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Abs</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> (x^(x&gt;&gt;<span class="hljs-number">31</span>))-(x&gt;&gt;<span class="hljs-number">31</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>取最值：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Max</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> (b&amp;(a-b&gt;&gt;<span class="hljs-number">31</span>))|(a&amp;(~(a-b)&gt;&gt;<span class="hljs-number">31</span>));<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Min</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> (a&amp;(a-b&gt;&gt;<span class="hljs-number">31</span>))|(b&amp;(~(a-b)&gt;&gt;<span class="hljs-number">31</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>a与b同号：<code>(a^b)&gt;=0</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>数学笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>进位制</title>
    <link href="/2024/07/11/%E8%BF%9B%E4%BD%8D%E5%88%B6/"/>
    <url>/2024/07/11/%E8%BF%9B%E4%BD%8D%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="进位制的历史"><a href="#进位制的历史" class="headerlink" title="进位制的历史"></a>进位制的历史</h2><p>从人类出现文明，开始生产时，计数的方式就成为一个不可或缺的工具。</p>]]></content>
    
    
    
    <tags>
      
      <tag>数学笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>枚举</title>
    <link href="/2024/02/21/%E6%9E%9A%E4%B8%BE/"/>
    <url>/2024/02/21/%E6%9E%9A%E4%B8%BE/</url>
    
    <content type="html"><![CDATA[<p>枚举，就是列举所有情况，最终得出答案。</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p><a href="https://www.luogu.com.cn/problem/P1085">洛谷P1085 [NOIP2004 普及组] 不高兴的津津</a></p><p>枚举一周的每一天打擂台即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> x, y, maxn = <span class="hljs-number">8</span>, day;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> <span class="hljs-type">const</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">8</span>; i++)<br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);<br><span class="hljs-keyword">if</span> (x + y &gt; maxn)<br>maxn = x + y, day = i;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, day);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>模拟</title>
    <link href="/2024/02/21/%E6%A8%A1%E6%8B%9F/"/>
    <url>/2024/02/21/%E6%A8%A1%E6%8B%9F/</url>
    
    <content type="html"><![CDATA[<p>没有什么可讲的，就是完全跟着题意做。</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p><a class="btn" href="https://www.luogu.com.cn/problem/P1047" title="洛谷P1047 [NOIP2005 普及组] 校门外的树">洛谷P1047 [NOIP2005 普及组] 校门外的树</a></p><p>AC代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">bool</span> l[<span class="hljs-number">10005</span>];<br><span class="hljs-type">int</span> L, M, s, m[<span class="hljs-number">2</span>][<span class="hljs-number">105</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> <span class="hljs-type">const</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;L, &amp;M);<br>L++;<br><span class="hljs-built_in">memset</span>(l, <span class="hljs-number">1</span>, <span class="hljs-built_in">sizeof</span>(l));<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; M; i++)<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;m[<span class="hljs-number">0</span>][i], &amp;m[<span class="hljs-number">1</span>][i]);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; L; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; M; j++)<br><span class="hljs-keyword">if</span> (i &gt;= m[<span class="hljs-number">0</span>][j] &amp;&amp; i &lt;= m[<span class="hljs-number">1</span>][j])<br>l[i] = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (l[i])<br>s++;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, s);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试博客</title>
    <link href="/2024/02/03/%E6%B5%8B%E8%AF%95%E5%8D%9A%E5%AE%A2/"/>
    <url>/2024/02/03/%E6%B5%8B%E8%AF%95%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p class="note note-primary">primary</p><p class="note note-secondary">secondary</p><p class="note note-success">success</p><p class="note note-danger">danger</p><p class="note note-warning">warning</p><p class="note note-info">info</p><p class="note note-lights">lights</p><p><span class="label label-primary">primary</span><span class="label label-default">default</span><span class="label label-info">info</span><span class="label label-success">success</span><span class="label label-warning">warning</span><span class="label label-danger">danger</span></p>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-b5714680" role="button" aria-expanded="false" aria-controls="collapse-b5714680">        <div class="fold-arrow">▶</div>title      </div>      <div class="fold-collapse collapse" id="collapse-b5714680">        <div class="fold-content">          <p>需要折叠的一段内容，支持 markdown</p>        </div>      </div>    </div>            <input type="checkbox"  checked="checked">勾选框          <p><a class="btn" href="https://zhrleo.github.io" title="zhrleo">按钮</a></p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://cdn.luogu.com.cn/upload/image_hosting/aoi263ym.png"></div><div class="group-image-wrap"><img src="https://cdn.luogu.com.cn/upload/image_hosting/aoi263ym.png"></div><div class="group-image-wrap"><img src="https://cdn.luogu.com.cn/upload/image_hosting/aoi263ym.png"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://cdn.luogu.com.cn/upload/image_hosting/aoi263ym.png"></div><div class="group-image-wrap"><img src="https://cdn.luogu.com.cn/upload/image_hosting/aoi263ym.png"></div></div></div><pre><code class="mermaid">classDiagramClass01 &lt;|-- AveryLongClass : CoolClass03 *-- Class04Class05 o-- Class06Class07 .. Class08Class09 --&gt; C2 : Where am i?Class09 --* C3Class09 --|&gt; Class07Class07 : equals()Class07 : Object[] elementDataClass01 : size()Class01 : int chimpClass01 : int gorillaClass08 &lt;--&gt; C2: Cool label</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/02/02/hello-world/"/>
    <url>/2024/02/02/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
